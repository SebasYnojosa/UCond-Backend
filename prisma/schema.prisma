// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int          @id @default(autoincrement())
  nombre           String
  apellido         String
  cedula           String       @unique
  fecha_nacimiento DateTime
  correo           String       @unique
  telefono         String
  password         String
  condominios      Condominio[]
  viviendas        Vivienda[]
  tesorero         Junta[]      @relation("tesorero")
  presidente       Junta[]      @relation("presidente")
  vicepresidente   Junta[]      @relation("vicepresidente")
  secretario       Junta[]      @relation("secretario")
  reportes         Reporte[]
  deudas           Deuda[]
}

model Condominio {
  id                   Int           @id @default(autoincrement())
  administrador        User          @relation(fields: [id_administrador], references: [id])
  id_administrador     Int
  viviendas            Vivienda[]
  junta                Junta?
  nombre               String
  tipo                 String
  direccion            String
  url_pagina_actuarial String
  reserva              Float         @default(0) @db.DoublePrecision
  estado_pago          Boolean       @default(true)
  fecha_pago           DateTime      @default(now())
  reportes             Reporte[]
  gastos               Gasto[]
  cosas_comunes        CosaComun[]
  anuncios             Anuncio[]
  metodos_pago         Metodo_Pago[]
}

model Metodo_Pago {
  id            Int        @id @default(autoincrement())
  tipo          String
  id_condominio Int
  condominio    Condominio @relation(fields: [id_condominio], references: [id])
}

model Vivienda {
  id                 Int        @id @default(autoincrement())
  condominio         Condominio @relation(fields: [id_condominio], references: [id])
  id_condominio      Int
  propietario        User?      @relation(fields: [id_propietario], references: [id])
  id_propietario     Int?
  nombre             String
  cedula_propietario String
  alicuota           Float      @db.DoublePrecision
  dimension          Float      @db.DoublePrecision
}

model Junta {
  id                Int        @id @default(autoincrement())
  condominio        Condominio @relation(fields: [id_condominio], references: [id])
  id_condominio     Int        @unique
  tesorero          User       @relation(fields: [id_tesorero], references: [id], name: "tesorero")
  id_tesorero       Int
  presidente        User       @relation(fields: [id_presidente], references: [id], name: "presidente")
  id_presidente     Int
  vicepresidente    User       @relation(fields: [id_vicepresidente], references: [id], name: "vicepresidente")
  id_vicepresidente Int
  secretario        User       @relation(fields: [id_secretario], references: [id], name: "secretario")
  id_secretario     Int
}

model Gasto {
  id            Int        @id @default(autoincrement())
  condominio    Condominio @relation(fields: [id_condominio], references: [id])
  id_condominio Int        @unique
  monto         Float      @db.DoublePrecision
  concepto      String
  fecha_limite  DateTime
  tipo          String
  activo        Boolean    @default(true)
  deudas        Deuda[]
}

model Deuda {
  id             Int     @id @default(autoincrement())
  usuario        User?   @relation(fields: [id_usuario], references: [id])
  id_usuario     Int?    @unique
  cedula_usuario String  @unique
  gasto          Gasto   @relation(fields: [id_gasto], references: [id])
  id_gasto       Int     @unique
  monto_usuario  Float   @db.DoublePrecision
  activa         Boolean @default(true)
  pagos          Pago[]
}

model Pago {
  id              Int      @id @default(autoincrement())
  deuda           Deuda    @relation(fields: [id_deuda], references: [id])
  id_deuda        Int      @unique
  monto_pagado    Float    @db.DoublePrecision
  fecha_pago      DateTime @default(now())
  metodo_pago     String
  notas           String?
  nro_referencia  String?
  url_comprobante String
}

model Reporte {
  id            Int        @id @default(autoincrement())
  condominio    Condominio @relation(fields: [id_condominio], references: [id])
  id_condominio Int        @unique
  usuario       User       @relation(fields: [id_usuario], references: [id])
  id_usuario    Int        @unique
  asunto        String
  contenido     String
  fecha         DateTime   @default(now())
  activo        Boolean    @default(true)
  url_archivo   String?
}

model CosaComun {
  id            Int        @id @default(autoincrement())
  condominio    Condominio @relation(fields: [id_condominio], references: [id])
  id_condominio Int        @unique
  nombre        String
  es_de_todos   Boolean
}

model Anuncio {
  id            Int        @id @default(autoincrement())
  asunto        String
  descripcion   String
  fecha         DateTime   @default(now())
  id_condominio Int
  condominio    Condominio @relation(fields: [id_condominio], references: [id])
}
